library(foreach)
n <- 10000
df < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
n <- 10000
df < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
# Create Data
n <- 10000
df < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
df < as.data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
df < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
set.seed(100)
n <- 10000
df < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
ds < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
ds < data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df$x)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df$x)
yhat <- predict(obj, df$x)
yhat <- predict(obj, df)
for(i in 1:1000) {
print(i)
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
placeholder[[i]] <- temp # To assign new objects to a list, you define an index aby setting two square brackets and a number.
}
placeholder <- list() # Trick for getting around slow loops
for(i in 1:1000) {
print(i)
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
placeholder[[i]] <- temp # To assign new objects to a list, you define an index aby setting two square brackets and a number.
}
placeholder <- list() # Trick for getting around slow loops
start <- Sys.time()
for(i in 1:1000) {
print(i)
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
placeholder[[i]] <- temp # To assign new objects to a list, you define an index aby setting two square brackets and a number.
}
end <- Sys.time()
end - start
detectCores()
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
start <- Sys.time()
foreach(i = 1:1000, .combine = rbind) %dopar% { #.combine gives us the form we want it to come back in.
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
return(temp)
}
end <- Sys.time()
stopCluster(cl) # Can eat into operations and slow down your computer if you don't do this.
rm(path, AllMaps, combsub, dataOM7, COS, elec, duplong, Full_data_add, Full_data_add2)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
start <- Sys.time()
foreach(i = 1:1000, .combine = rbind) %dopar% { #.combine gives us the form we want it to come back in.
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
return(temp)
}
end <- Sys.time()
stopCluster(cl) # Can eat into operations and slow down your computer if you don't do this.
rm(oil, Full_data_wide_plotrent, Full_data_wide_plotstars, VACurMAp, VACurMapSub, VACurMapSub2)
rm(StarOLD, start, rr, rr.var, rr.var, testfiles)
rm(tmp.ret, tmp.ret22, tmp22, tmp4, placeholder, out.file)
rm(xu100.zoom StarOLS)
rm(xu100.zoom, StarOLS)
rm(xu100.zoo, VA_zipsubCRSmerge)
rm(oil.zoo)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
start <- Sys.time()
foreach(i = 1:1000, .combine = rbind) %dopar% { #.combine gives us the form we want it to come back in.
n <- 10000
df <- data.frame(y = rnorm(n, 10, 100), x = rnorm(n, 10, 100))
obj <- lm(y ~ x, data = df)
yhat <- predict(obj, df)
temp <- data.frame(iteration = i, y = df$y, yhat = yhat)
return(temp)
}
end <- Sys.time()
stopCluster(cl) # Can eat into operations and slow down your computer if you don't do this.
rm(usd, obj, phoenix, my.index, my.formula, n, LagErrStars, LagErrOLS, i, forzooplot, ErrStars, end, data1, data, cl, AP, AirPassengers, xu100, VaCurMap, tmp3, tmp2, tmp1)
rm(VACurMap)
end - start
start - end
cobined_collapse1 <- spread(cobined_agg, key = YearMonth, value = stars.x)
names(combinedData)
combinedData <- inner_join(cobined_agg, zillow, by='postal_code', match='all')
names(combinedData)
combinedData <- inner_join(cobined_agg, zillow, by='postal_code', match='all')
cobined_agg
combinedData <- inner_join(cobined_agg, zillow, by='postal_code', match='all')
combinedData
cobined_collapse <- spread(cobined_agg, key = YearMonth, value = stars.x, drop = FALSE)
names(cobined_collapse)
View(cobined_collapse)
cobined_collapse <- spread(cobined_agg, key = YearMonth, value = stars.x)
cobined_agg
load("lec12.Rda")
library(sqldf)
install.packages('VennDiagram')
library(VennDiagram)
out <- sqldf('SELECT names
FROM us')
View(uk)
head(out)
class(out)
out <- sqldf('SELECT names, dates_of_birth as DOB
FROM us')
out
head(out)
out <- sqldf('SELECT names, dates_of_birth as dob, nationalities as nat
FROM us
limit 10')
head(out)
combinedData <- inner_join(cobined_agg, zillow, by='postal_code', match='all')
combinedData <- inner_join(cobined_collapse, zillow, by='postal_code', match='all')
names(combinedData)
out <- sqldf('SELECT *
FROM us
limit 10')
out <- sqldf('SELECT DISTINCT person
FROM us')
out
out2 <- unique(tolower(us$person))
out <- sqldf('SELECT DISTINCT LOWER(person)
FROM us')
out2 <- unique(tolower(us$person))
out2 <- unique(tolower(us$person))
sqldf('SELECT *
FROM uk
limit 3')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/DataScienceIntro")
write.csv(Full_data_wide, "FULLDATASETYZWIDETRUE.csv")
sqldf('SELECT *
FROM uk
limit 3')
sqldf('SELECT "Name.6", "Name.1"
FROM uk
LIMIT 3')
sqldf('SELECT ("Name.6" || "Name.1" ) as name
FROM uk
LIMIT 3')
out <- sqldf('SELECT Nationality, ("Name.6" ||", " || "Name.1" ||" "|| "Name.2"  ||" "|| "Name.3"  ||" "|| "Name.4"  ||" "|| "Name.5") as name
FROM uk')
uk2 <- sqldf('SELECT Nationality, DOB, LOWER("Name.6" || ", " || "Name.1" ||" "|| "Name.2"  ||" "|| "Name.3"  ||" "|| "Name.4"  ||" "|| "Name.5") as names
FROM uk')
out <- sqldf('SELECT person
FROM us
GROUP BY person')
agg <- aggregate(us$person, by = list(person = us$person), length)
us.entities <- sqldf('SELECT person, COUNT(*) as count
FROM us
GROUP BY  person')
uk.entities <- sqldf('SELECT "Group.ID" as person, COUNT(*) as count
FROM uk
GROUP BY  person')
sqldf('SELECT AVG(count) as avg
FROM entities')
sqldf('SELECT AVG(count) as avg
FROM entities')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/DataScienceIntro/lecture-12/data")
sqldf('SELECT AVG(count) as avg
FROM entities')
sqldf('SELECT AVG(count) as avg
FROM us.entities')
sqldf('SELECT AVG(count) as avg
FROM "us.entities"')
sqldf('SELECT SUM(count) as sum
FROM entities')
sqldf('SELECT SUM(count) as sum
FROM "us.entities"')
sqldf('SELECT STDEV(count) as sd
FROM "us.entities"')
sqldf('SELECT SUM(count) as sum, AVG(count) as avg, STDEV(count) as sd, MIN(count) as min, MAX(count) as max
FROM "us.entities"')
out <- sqldf('SELECT *
FROM uk2
WHERE Nationality like "%United States%"')
out <- sqldf('SELECT *
FROM uk2
WHERE Nationality like "%United States%" OR Nationality like "%America%"')
sqldf('SELECT count(*) count
FROM uk2
WHERE Nationality like "%United States%" OR Nationality like "%America%"')
sqldf('SELECT count(*) count
FROM uk2
WHERE Nationality == ""')
uk_out <- sqldf('SELECT DISTINCT LOWER(names) names, Nationality as uk_nat, count(*) uk_cnt
FROM uk2
GROUP BY LOWER(names)')
uk_out$names <- trimws(uk_out$names)
us_out <- sqldf('SELECT DISTINCT LOWER(names) names, nationalities as us_nat, count(*) us_cnt
FROM us
GROUP BY LOWER(names)')
comb_out <- sqldf('SELECT us_out.names, us_out.us_nat, uk_out.uk_nat, us_out.us_cnt, uk_out.uk_cnt
FROM us_out
INNER JOIN uk_out ON us_out.names = uk_out.names')
grid.newpage()
draw.pairwise.venn(nrow(uk_out), nrow(us_out), nrow(comb_out),
category = c("UK List", "US List"),
fill = c("pink", "turquoise"),
alpha = rep(0.5, 2),
cat.dist = rep(0.025, 1),cat.pos = rep(0.24,2) )
entities <- rbind(data.frame(source = "uk", uk.entities), data.frame(source = "us", us.entities))
ggplot(entities, aes(x = count)) +
geom_density(aes(group = source, colour = source, fill = source), alpha = 0.4) +
scale_x_log10()
names(combinedData)
names(combinedData)
write.csv(combinedData, "FULLDATASETYZWIDETRUE.csv")
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:153])), times = names(combinedData[2:153]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:153])), times = names(combinedData[2:153]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add2 <- reshape(combinedData, varying = list(names(combinedData[161:248])), times = names(combinedData[161:248]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
head(Full_data_add)
names(Full_data_add)
names(combinedData)
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:154])), times = names(combinedData[2:154]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
names(Full_data_add)
names(combinedData)
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:154])), times = names(combinedData[2:154]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add
Full_data_add2 <- reshape(combinedData, varying = list(names(combinedData[161:248])), times = names(combinedData[161:248]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add2 <- reshape(combinedData, varying = list(names(combinedData[161:248])), times = names(combinedData[161:248]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add2
Full_data_add2 <- reshape(combinedData, varying = list(names(combinedData[161:248])), times = names(combinedData[161:248]), idvar = 'postal_code', v.names = 'rentprice' , direction = 'long')
Full_data_add2
names(Full_data_add)
Full_data_add <- Full_data_add[-c(8:95)]
names(Full_data_add)
names(Full_data_add2)
Full_data_add2 <- Full_data_add[-c(2:154)]
names(Full_data_add2)
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:154])), times = names(combinedData[2:154]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
names(Full_data_add)
names(combinedData)
names(Full_data_add)
names(combinedData)
Full_data_add <- Full_data_add[-c(2:68, 247:248)]
combinedData <- combinedData[-c(2:68, 247:248)]
names(combinedData)
write.csv(combinedData, "FULLDATASETYZWIDETRUE.csv")
names(combinedData)
names(combinedData)
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:87])), times = names(combinedData[2:87]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
names(Full_data_add)
Full_data_add <- Full_data_add[-c(8:93)]
names(Full_data_add)
names(combinedData)
Full_data_add2 <- reshape(combinedData, varying = list(names(combinedData[94:179])), times = names(combinedData[94:179]), idvar = 'postal_code', v.names = 'rentprice' , direction = 'long')
names(Full_data_add2)
Full_data_add2 <- Full_data_add2[-c(2:87)]
names(Full_data_add2)
names(Full_data_add)
names(Full_data_add2)
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[9:10])
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[9:10])
names(Full_data_add2)
names(Full_data_add)
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[9:10])
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[8:9])
Full_data_long
write.csv(Full_data_long, "FULLDATASETYZLONGTRUE.csv")
Full_data_long$time<- as.Date(strptime(paste(1, Full_data_long$time),"%Y-%m"))
Full_data_long$time
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[8:9])
Full_data_long$time
Full_data_long$time <- as.Date(strptime(paste(1, Full_data_long$time),"%d %Y-%m"))
Full_data_long$time
my.formula <- rentprice ~ stars
my.index <- c('postal_code','YearMonth')
my.hausman.test <- phtest(x = my.formula,
data = Full_data_long,
model = c('within', 'random'),
index = my.index)
my.index <- c('postal_code','time')
my.hausman.test <- phtest(x = my.formula,
data = Full_data_long,
model = c('within', 'random'),
index = my.index)
print(my.hausman.test)
my.pdm <- plm(data = Full_data_long,
formula = rentprice ~ stars,
model = 'random',
index = my.index)
summary(my.pdm)
Full_data_long <- cbind(Full_data_add[c(1:7, 9)], Full_data_add2[8:9])
Full_data_long
names(Full_data_wide)
Full_data_wide_plotstars <- Full_data_wide[2:87]
names(Full_data_wide_plotstars)
plot(c(1:86), apply(Full_data_wide_plotstars, 2, mean),  ylim = c(0,5),  xlab = 'Time (YearMonths)', ylab = 'Avg. Stars', main = 'Mean Stars per Month', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(1:86), apply(Full_data_wide_plotstars, 2, mean), type = 'b', pch = 1, lty = 2)
Full_data_wide <- combinedData
names(Full_data_wide)
Full_data_wide_plotstars <- Full_data_wide[2:87]
lines(c(1:86), apply(Full_data_wide_plotstars, 2, mean), type = 'b', pch = 1, lty = 2)
plot(c(1:86), apply(Full_data_wide_plotstars, 2, mean),  ylim = c(0,5),  xlab = 'Time (YearMonths)', ylab = 'Avg. Stars', main = 'Mean Stars per Month', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(1:86), apply(Full_data_wide_plotstars, 2, mean), type = 'b', pch = 1, lty = 2)
names(Full_data_wide)
Full_data_wide_plotrent <- Full_data_wide[94:179]
names(Full_data_wide_plotrent)
plot(c(1:86), apply(Full_data_wide_plotrent, 2, mean),  ylim = c(1100,1500),  xlab = 'Time (YearMonths)', ylab = 'Avg. Rent', main = 'Mean Rent per Month', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(1:86), apply(Full_data_wide_plotrent, 2, mean), type = 'b', pch = 1, lty = 2)
plot(c(1:86), apply(Full_data_wide_plotrent, 2, mean),  ylim = c(1100,1600),  xlab = 'Time (YearMonths)', ylab = 'Avg. Rent', main = 'Mean Rent per Month', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(1:86), apply(Full_data_wide_plotrent, 2, mean), type = 'b', pch = 1, lty = 2)
names(Full_data_long)
names(Full_data_long)
tmp <- Full_data_long[c(8:10)]
tmp$time <- as.Date(strptime(paste(1, tmp$time),"%d %Y-%m"))
tmp$time
tmp <- Full_data_long[c(8:10)]
names(Full_data_long)
head(Full_data_long)
names(Full_data_add)
head(Full_data_add)
head(Full_data_long)
head(combinedData)
head(Full_data_add2)
head(Full_data_add)
names(combinedData[2:87])
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:87])), times = names(as.character(combinedData[2:87])), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
Full_data_add <- reshape(combinedData, varying = list(names(combinedData[2:87])), times = names(combinedData[2:87]), idvar = 'postal_code', v.names = 'stars' , direction = 'long')
head(Full_data_add)
combinedData <- inner_join(cobined_collapse, zillow, by='postal_code', match='all')
head(combinedData)
cobined_collapse <- spread(cobined_agg, key = YearMonth, value = stars.x)
cobined_collapse
names(yelp_review_geomatch)
names(cobined_collapse)
cobined_agg
cobined_agg
head(combinedData)
table(as.factor(Full_data_long$time))
tmp1
names(Full_data_long)
tmp <- Full_data_long[c(8:10)]
tmp$time <- as.Date(strptime(paste(1, tmp$time),"%d %Y-%m"))
tmp1 <- aggregate(stars ~ time, tmp, mean, drop = FALSE)
tmp1
tmp2 <- aggregate(rentprice ~ time, tmp, mean, drop = FALSE)
tmp3 <- left_join(tmp1, tmp2, by = 'time')
tmp3
tmp4 <- zoo(tmp3[,-1], order.by=as.Date(strptime(as.character(tmp3[,1]), "%Y-%m-%d")))
tmp4
tmp.ret <- CalculateReturns(tmp4)
colnames(tmp) <- colnames(tmp.ret) <- c("stars","rentprice")
plot(tmp4, main="Stars and Rent Prices Index", xlab="YearMonth Date")
plot(tmp.ret, main="Return Series for Stars and Rent Prices Index", xlab="Date")
plot(coredata(na.omit(tmp.ret)), pch=".", main="Return Series for Stars vs Rent Prices Index")
rr <- rollapply(na.approx(na.trim(tmp4, side="both")), width = 120,
FUN = function(z) coef(lm(rentprice ~ tmp3, data = as.data.frame(z))),
by.column = FALSE, align = "right")
rr <- rollapply(na.approx(na.trim(tmp4, side="both")), width = 120,
FUN = function(z) coef(lm(rentprice ~ tmp3, data = as.data.frame(z))),
by.column = FALSE, align = "left")
rr.var <- rollapply(na.approx(na.trim(tmp4, side="both")), width = 120,
FUN = function(z) sd(residuals(lm(rentprice ~ tmp3[1:2], data = as.data.frame(z)))),
by.column = FALSE, align = "left")
res <- merge(rr,rr.var)
rr.var
library(xts)
install.packages(c("forecast","TSA"))
library(forecast)
library(TSA)
source('~/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/R Script for Clustering.R')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/")
testfiles <- list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2/OM8", pattern="*.geojson", full.names = TRUE)
VA_zipsubCRSmerge <- readOGR(".", "VAzipsubCRSmerge")
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipsubCRSmerge)
inters1 <- raster::intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata1$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata1, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata1, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- cbind(IdePoAvfu1, IdePoAvse1, Respperzipav1, Zipperdistav1)
print(Output1)
}
data <- lapply(testfiles, idepo)
data1 <- data
dataOM8 <- do.call(rbind.data.frame, data1)
write.csv(dataOM8, "dataOM8.csv")
View(Full_data_long)
xucl <- na.approx(na.trim(xu100.zoo[,"Close"], side="both"))
tmp4
xucl <- na.approx(na.trim(tmp4[,"stars"], side="both"))
head(to.weekly(xucl))
stars <- na.approx(na.trim(tmp4[,"stars"], side="both"))
head(to.weekly(stars))
garch(tmp4, order=c(1, 1))
names(Full_data_long)
garch(Full_data_long$stars, order=c(1, 1))
garch(Full_data_long$rentprice, order=c(1, 1))
garch(Full_data_long$stars, order=c(1, 1), na.rm = TRUE)
garch(Full_data_long$stars[!is.na(Full_data_long$stars),], order=c(1, 1))
arch(Full_data_long$rentprice, order=c(1, 1))
garch(Full_data_long$rentprice, order=c(0, 3))
garch(Full_data_long$rentprice, order=c(2, 3))
fitted(garchoutput)
fitted(garchoutput)
archoutput <- garch(Full_data_long$rentprice, order=c(0, 3))
garchoutput <- garch(Full_data_long$rentprice, order=c(2, 3))
fitted(garchoutput)
acf(Full_data_long$stars)
acf(Full_data_long$stars, na.rm = TRUE)
pacf(Full_data_long$stars, na.rm = TRUE)
acf(Full_data_long$stars, na.action = na.pass)
acf(Full_data_long$stars, na.action = na.omit)
acf(Full_data_long$stars, na.action = na.pass)
pacf(Full_data_long$stars, na.action = na.pass)
# Setting the plot to see both simultaneously
par(mfrow=c(2,1))
# Plotting the autocorrelation
acf(Full_data_long$stars, na.action = na.pass)
# na.pass returns the object unchanged
pacf(Full_data_long$stars, na.action = na.pass)
# Setting the plot to see both simultaneously
par(mfrow=c(2,1))
# Plotting the autocorrelation
acf(Full_data_long$stars, na.action = na.pass)
# na.pass returns the object unchanged
pacf(Full_data_long$stars, na.action = na.pass)
# Setting the plot to see both simultaneously
par(mfrow=c(2,1))
# Plotting the autocorrelation
acf(Full_data_long$stars, na.action = na.pass)
# na.pass returns the object unchanged
pacf(Full_data_long$stars, na.action = na.pass)
acf(Full_data_long$stars, na.action = na.pass)
acf(Full_data_long$stars, na.action = na.pass)
pacf(Full_data_long$stars, na.action = na.pass)
names(Full_data_long)
starsts <- Full_data_long[8:9]
rentts <- Full_data_long[9:10]
starsts <- ts(starsts)
rentts <- Full_data_long[9:10]
rentts <- ts(rentts)
plot(starts)
plot(starsts)
plot(rentts)
starsts <- ts(starsts)
plot(starsts)
rentts <- Full_data_long[9:10]
rentts
rentts <- ts(rentts)
plot(rentts)
sum(rentts)
summarise(rentts)
summarise(Full_data_long)
summarise(Full_data_long$rentprice)
summarise(as.numeric(Full_data_long$rentprice))
class(Full_data_long$rentprice)
rentts <- ts(rentts)
plot(rentts)
Full_data_long$time <- as.Date(strptime(paste(1, Full_data_long$time),"%d %Y-%m"))
Full_data_long$time
starsts <- Full_data_long[8:9]
starsts <- ts(starsts)
plot(starsts)
rentts <- Full_data_long[9:10]
rentts <- ts(rentts)
plot(rentts)
library(tseries)
archoutputstars <- garch(Full_data_long$stars, order=c(0, 3))
archoutputstars <- garch(Full_data_long$stars, order=c(0, 3), trace = FALSE)
archoutputstars <- garch(Full_data_long$stars, order=c(0, 3), trace = FALSE)
archoutputstars <- garch(Full_data_long$stars, order=c(1, 1), trace = FALSE)
garchoutputrent <- garch(Full_data_long$rentprice, order=c(1, 1))
fitted(garchoutput)
fitted(garchoutputrent)
garchoutputrent

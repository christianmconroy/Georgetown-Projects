kmapes <- mapply(housemape,f, arg1=spec1)
kmapes <- mapply(housemape,f, arg1="spec1")
kmapes <- mapply(f, housemape, arg1="spec1")
f <- 1:10
kmapes <- mapply(f, housemape, arg1=spec1)
kmapes <- lapply(f, housemape, arg1=spec1)
kmapes <- lapply(f, housemape, spec1)
kmapes <- lapply(f, housemape, spec1)
kmapes1 <- lapply(f, housemape, spec1)
kmapes
class(kmapes)
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats")
shiny::runApp()
runApp()
shinyUI(fluidPage(
# Application title
titlePanel(title="Input widgets and plots"),
sidebarLayout(
# Sidebar
sidebarPanel("Input area",
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
# Main panel
mainPanel("Output area",
plotOutput("outhist")
)
)
))
output$outhist <- renderPlot({hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(20),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
mydens <- density(faithful$eruptions, adjust = 1.0)
lines(mydens, col = "blue")})
# Minimal template for a server
library(shiny)
library(stats)
data(faithful)
shinyServer(
function(input, output) {
output$outhist <- renderPlot({hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(20),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
mydens <- density(faithful$eruptions, adjust = 1.0)
lines(mydens, col = "blue")})
}
)
library(shiny)
# Minimal template for a server
library(shiny)
library(stats)
data(faithful)
shinyServer(
function(input, output) {
output$outhist <- renderPlot({hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(20),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
mydens <- density(faithful$eruptions, adjust = 1.0)
lines(mydens, col = "blue")})
}
)
library(shiny)
# Define UI
shinyUI(fluidPage(
# Application title
titlePanel(title="Input widgets and plots"),
sidebarLayout(
# Sidebar
sidebarPanel("Input area",
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
# Main panel
mainPanel("Output area",
plotOutput("outhist")
)
)
))
runApp('C:/Users/chris/Downloads')
runApp('C:/Users/chris/Downloads')
runApp('C:/Users/chris/Downloads')
runApp('C:/Users/chris/Downloads')
setwd("C:\Users\chris\Downloads")
setwd("\Users\chris\Downloads")
setwd("Users\chris\Downloads")
setwd("C:/Users/chris/Downloads")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/chris/downloads")
runApp('C:/Users/chris/Downloads')
runApp('C:/Users/chris/Downloads')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('C:/Users/chris/Downloads')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('C:/Users/chris/Downloads')
runApp('C:/Users/chris/Downloads')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
runApp('~/GeorgetownMPPMSFS/McCourtMPP/Semester4MPP/ProgrammingStats')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#### Aggregate Analysis of All GEOJSON FILES ####
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
require(rgeos)
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
library(foreach)
library(doParallel)
install.packages('raster')
#Clusters
n <- detectCores()
cl <- makeCluster(detectCores())
#clusterExport(cl, c(VA_zipCRSmerge), globalenv())
registerDoParallel(cl)
#All files -- this needs to be on the same machine
#Also, if each iteration requires a different set of files,
#testfiles should be a data frame where each row is a list of all the files that are needed,
#then in the loop, each iteration should be a row number and within the loop code
#you would call upon each row-column combination
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind) %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
#### Aggregate Analysis of All GEOJSON FILES ####
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel")
require(rgeos)
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
library(foreach)
library(doParallel)
install.packages('raster')
#Clusters
n <- detectCores()
cl <- makeCluster(detectCores())
#clusterExport(cl, c(VA_zipCRSmerge), globalenv())
registerDoParallel(cl)
#All files -- this needs to be on the same machine
#Also, if each iteration requires a different set of files,
#testfiles should be a data frame where each row is a list of all the files that are needed,
#then in the loop, each iteration should be a row number and within the loop code
#you would call upon each row-column combination
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind) %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
require(rgeos)
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
require(sp)
require(rgdal)
require(rgeos)
require(raster)
install.packages('raster')
require(rgdal)
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel")
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles")
require(rgdal)
require(rgeos)
VA_zipCRSmerge <- readOGR(".", 'VAzipsubCRSmerge')
library(foreach)
library(doParallel)
install.packages('raster')
n <- detectCores()
cl <- makeCluster(detectCores())
#clusterExport(cl, c(VA_zipCRSmerge), globalenv())
registerDoParallel(cl)
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind) %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind, .packages="projection") %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind, .packages="raster") %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
install.packages('raster')
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind) %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind, .packages = c("foreach", "raster")) %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind, .packages = "raster") %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2")
testfiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel/output_maps_2", pattern="*.geojson", full.names = TRUE)), c('Files'))
vafiles <- setNames(as.data.frame(list.files(path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ForParallel", pattern="*.shp", full.names = TRUE)), c("Files"))
testfiles <- rbind(testfiles, vafiles)
#For testing, keep it to 10 to see if it works. If it does work, replace with testfiles in the foreach
codes <- as.character(testfiles[c(1:3), 1])
# Consider adding in: .export = c("VA_zipCRSmerge")
example <- foreach(i = codes, .combine = rbind, .packages = "raster") %dopar% {
require(sp)
require(rgdal)
require(rgeos)
require(raster)
#Put any other libraries here, you don't put all libraries in here, it won't work
#Any custom function needs to be called, almost like loading a library
idepo <- function(filename) {
precinctmaps1 <- readOGR(dsn = filename, layer = ogrListLayers(filename))
projection(precinctmaps1) <- projection(VA_zipCRSmerge)
inters1 <- intersect(VA_zipsubCRSmerge, precinctmaps1)
inters1$area <- area(inters1)
mergeddata1 <- as.data.frame(inters1@data)
mergeddata1 <- mergeddata1[!is.na(mergeddata1$IdePoAv),]
mergedistrict11 <-aggregate(mergeddata1, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
mergedistrict21 <- aggregate(. ~ cluster, mergeddata, length)
mergedistrict31 <- aggregate(. ~ cluster, mergeddata, sum)
mergedistrict41 <- merge(mergedistrict11, mergedistrict21, by = "cluster")
mergefull1 <- merge(mergedistrict41, mergedistrict31, by = "cluster")
mergefull1 <- subset(mergefull1, select = c(cluster, IdePoAv.x, IdePoSE.x, ZCTA5CE00.y, Rescount))
IdePoAvfu1 <- mean(mergefull1$IdePoAv.x)
IdePoAvse1 <- mean(mergefull1$IdePoSE.x)
Respperzipav1 <- mean(mergefull1$Rescount)
Zipperdistav1 <- mean(mergefull1$ZCTA5CE00.y)
Output1 <- data.frame(IdePoAvfu1, IdePoAvse1,  Respperzipav1, Zipperdistav1)
return(Output1)
}
#Assuming your output is directly from idepo(i), then you're good
return(idepo(i))
}
install.packages('raster')

data("AirPassengers")
AP <- AirPassengers
plot(AP)
plot(log(AP))
labelled in a data.frame
SIN <- COS <- matrix(nr = length(AP), nc = 6)
for(i in 1:6) {
SIN[,i] <- sin(2 * pi * i * time(AP))
COS[,i] <- cos(2 * pi * i * time(AP))
SIN <- COS <- matrix(nr = length(AP), nc = 6)
for (i in 1:6) {
SIN[,i] <- sin(2 * pi * i * time(AP))
COS[,i] <- cos(2 * pi * i * time(AP))
}
TIME <- (time(AP) - mean(time(AP)))/sd(time(AP))
mean(time(AP))
new.t <- time(ts(start = 1961, end = c(1970,12), fr = 12))
TIME <- (time(AP) - mean(time(AP)))/sd(time(AP))
SIN <- COS <- matrix(nr = length(AP), nc = 6)
for (i in 1:6) {
SIN[,i] <- sin(2 * pi * i * time(AP))
COS[,i] <- cos(2 * pi * i * time(AP))
}
SIN <- SIN[, -6]
new.dat <- data.frame(TIME = as.vector(TIME), SIN = SIN, COS = COS)
ozone <- read.table("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester3Fall2017MPP/Math426ALA/ozone0246.txt")
attach(ozone)
head(ozone)
View(ozone)
names(ozone) <- c('ID', 'time', 'treatment', 'fev1')
Christian Conroy #
compgrip <- read.table("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester3Fall2017MPP/Math426ALA/compgrip.txt")
attach(compgrip)
# Question 1#
names(compgrip) <- c('ID', 'treatment', 't0', 't1', 't2', 't3')
install.packages('psych')
library(psych)
compgrip$treatment <- as.numeric(compgrip$treatment == 2)
describeBy(compgrip, compgrip$treatment)
compgrip_1 <- compgrip[which(compgrip$treatment == 0),3:6]
compgrip_2 <- compgrip[which(compgrip$treatment == 1),3:6]
View(compgrip_1)
ozone_room <- ozone[which(ozone$treatment == 0),4]
ozone_ozone <- ozone[which(ozone$treatment == 1),4]
dental <- read.table("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester3Fall2017MPP/Math426ALA/dental.txt")
attach(dental)
View(dental)
install.packages('tidyverse')
library(tidyverse)
ozone_wide <- spread(ozone, key=time, value=fev1)
head(ozone_wide)
ozone_room <- ozone[which(ozone$treatment == 0),3:6]
ozone_ozone <- ozone[which(ozone$treatment == 1),3:6]
ozone_room <- ozone_wide[which(ozone_wide$treatment == 0),3:6]
ozone_ozone <- ozone_wide[which(ozone_wide$treatment == 1),3:6]
plot(c(0,2,4,6), apply(ozone_room, 2, mean),  ylim = c(130,160), xlab = 'Time (hours)', ylab = 'FEV1 Response by Treatment', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(0,2,4,6), apply(ozone_room, 2, mean), type = 'b', pch = 1, lty = 2)
lines(c(0,2,4,6), apply(ozone_ozone, 2, mean), type = 'b', pch = 16)
legend(x = 4, y = 13, legend = c('Treatment 1', 'Treatment 2'), lty =
c(2,1), pch = c(1,16))
plot(c(0,2,4,6), apply(ozone_room, 2, mean),  ylim = c(20,50), xlab = 'Time (hours)', ylab = 'FEV1', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(0,2,4,6), apply(ozone_room, 2, mean), type = 'b', pch = 1, lty = 2)
lines(c(0,2,4,6), apply(ozone_ozone, 2, mean), type = 'b', pch = 16)
legend(x = 4, y = 13, legend = c('Room', 'Ozone'), lty =
c(2,1), pch = c(1,16))
View(ozone_room)
View(ozone_ozone)
ozone_room <- ozone_wide[which(ozone_wide$treatment == 0),3:6]
ozone_ozone <- ozone_wide[which(ozone_wide$treatment == 1),3:6]
plot(c(0,2,4,6), apply(ozone_room, 2, mean),  ylim = c(35,45), xlab = 'Time (hours)', ylab = 'FEV1', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(0,2,4,6), apply(ozone_room, 2, mean), type = 'b', pch = 1, lty = 2)
lines(c(0,2,4,6), apply(ozone_ozone, 2, mean), type = 'b', pch = 16)
legend(x = 4, y = 13, legend = c('Room', 'Ozone'), lty =
c(2,1), pch = c(1,16))
plot(c(0,2,4,6), apply(ozone_room, 2, mean),  ylim = c(35,45), xlab = 'Time (hours)', ylab = 'FEV1', main = 'Mean FEV1 value at each hour of measurement' type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(0,2,4,6), apply(ozone_room, 2, mean), type = 'b', pch = 1, lty = 2)
lines(c(0,2,4,6), apply(ozone_ozone, 2, mean), type = 'b', pch = 16)
legend(x = 4, y = 13, legend = c('Room', 'Ozone'), lty =
c(2,1), pch = c(1,16))
plot(c(0,2,4,6), apply(ozone_room, 2, mean),  ylim = c(35,45), xlab = 'Time (hours)', ylab = 'FEV1', main = 'Mean Fev1 per hour', type = 'n')
abline(v = axTicks(1), h = axTicks(2), col = rgb(0.75, 0.75, 0.75, alpha = 0.5), lty = 3)
lines(c(0,2,4,6), apply(ozone_room, 2, mean), type = 'b', pch = 1, lty = 2)
lines(c(0,2,4,6), apply(ozone_ozone, 2, mean), type = 'b', pch = 16)
legend(x = 4, y = 13, legend = c('Room', 'Ozone'), lty =
c(2,1), pch = c(1,16))
dental_LONGf <-subset(dental_long, gender=="F")
matplot(c(8,10,12,14), t(dental[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
View(dental)
dental_LONGf <-subset(dental_long, gender=="F")
matplot(c(8,10,12,14), t(dental[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
dental <- read.table("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester3Fall2017MPP/Math426ALA/dental.txt")
attach(dental)
# Remember to subset out for all females only on all of this !#
# Question 1, Part A #
dental_LONGf <-subset(dental_long, gender=="F")
matplot(c(8,10,12,14), t(dental[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
dental <- read.table("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester3Fall2017MPP/Math426ALA/dental.txt")
attach(dental)
# Remember to subset out for all females only on all of this !#
# Question 1, Part A #
dental_LONGf <-subset(dental_long, gender=="F")
matplot(c(8,10,12,14), t(dental[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
matplot(c(0,2,4,6), t(ozone_room[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
ozone_room <- ozone_wide[which(ozone_wide$treatment == 0),3:6]
ozone_ozone <- ozone_wide[which(ozone_wide$treatment == 1),3:6]
matplot(c(0,2,4,6), t(ozone_room[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
matplot(c(8,10,12,14), t(dental[,c(3:6)]), type='b', pch=20, lty=1, col='gray')
View(dental)
matplot(c(0,2,4,6), t(ozone_room), type='b', pch=20, lty=1, col='gray')
matplot(c(0,2,4,6), t(ozone_room), type='b', pch=20, lty=1, col='gray', main= 'Fev1 response per subject - room')
matplot(c(0,2,4,6), t(ozone_ozone), type='b', pch=20, lty=1, col='gray', main= 'Fev1 response per subject - ozone')
matplot(c(0,2,4,6), t(ozone_room), type='b', pch=20, lty=1, col='gray', xlab = 'Time (hours)', main= 'Fev1 response per subject - room')
matplot(c(0,2,4,6), t(ozone_room), type='b', pch=20, lty=1, col='gray', xlab = 'Time (hours)', ylab = 'FEV1', main= 'Fev1 response per subject - room')
matplot(c(0,2,4,6), t(ozone_ozone), type='b', pch=20, lty=1, col='gray', xlab = 'Time (hours)', ylab = 'FEV1', main= 'Fev1 response per subject - ozone')
for(i in 1:3) {
for(j in 1:2) {
print(i+j)
} #2
} #1
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
View(df)
for (i in 1:ncol(df)) {
print(median(df[[i]]))
}
myMatrix <- matrix(1:50, nrow = 5)
myMatrix
for (i in myMatrix) {
print(i)
}
for (i in myMatrix) {
median(i)
}
install.packages('rmarkdown')
library(rmarkdown)
---
title: "Viridis Demo"
output: html_document
---
```{r include = FALSE}
library(viridis)
```
The code below demonstrates two color palettes in the [viridis](https://github.com/sjmgarnier/viridis) package. Each plot displays a contour map of the Maunga Whau volcano in Auckland, New Zealand.
## Viridis colors
```{r}
image(volcano, col = viridis(200))
```
## Magma colors
```{r}
image(volcano, col = viridis(200, option = "A"))
```
?html_document
VACurMap <- read.table("/Users/christianmconroy/Desktop/Documents/GeorgetownMPPMSFS/McCourtMPP/BIG Work/BIG Data Files/State House Dist.csv", header=T, sep="")
VACurMap <- read.csv("/Users/christianmconroy/Desktop/Documents/GeorgetownMPPMSFS/McCourtMPP/BIG Work/BIG Data Files/State House Dist.csv", header=T, sep="")
VACurMap <- read.csv("/Users/christianmconroy/Desktop/Documents/GeorgetownMPPMSFS/McCourtMPP/BIG Work/BIG Data Files/StateHouseDist.csv", header=T, sep="")
install.packages('rgdal')
library(rgdal)
path = "/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/maps/sampled_maps"
out.file<-""
file.names <- dir(path, pattern =".geojson")
for(i in 1:length(file.names)){
file <- readOGR(file.names[i],header=TRUE, sep=";", stringsAsFactors=FALSE)
out.file <- rbind(out.file, file)
}
write.table(out.file, file = "AllMaps.txt",sep=";",
row.names = FALSE, qmethod = "double",fileEncoding="windows-1252")
AllMaps <- read.table("AllMaps.txt", header=T)
fun <- function(){
n <- as.integer(readLines(n = 1)) # Use readlines to create the interaction with a user
p <- seq(.050, .950, .10)
fun <- function(x, N=n, prob = p){
format(round(as.numeric((pbinom(x, size = N, prob = prob))), digits=3), nsmall = 3)
}
for(i in 0:(n+3)){
if(i == 0){
print(sprintf("n = %d", n))
}
else if (i == 1) {
print(paste0(paste0(rep(' ',8), collapse = ''), 'Probability of Success --->'))
}
else if(i == 2) {
print(paste0(paste0(rep(' ',8), collapse = ''), paste0(format(p, nsmall = 3), collapse = ' ')))
}
else{
tempstr <- paste0("x = ", i-3, " | ", paste0(fun(x=i-3), collapse = ' '))
print(tempstr)
}
}
}
fun()
quit(fun())
fun <- function(){
n <- as.integer(readLines(n = 1)) # Use readlines to create the interaction with a user
p <- seq(.050, .950, .10)
fun <- function(x, N=n, prob = p){
format(round((pbinom(x, size = N, prob = prob)), digits=3), nsmall = 3)
}
for(i in 0:(n+3)){
if(i == 0){
print(sprintf("n = %d", n))
}
else if (i == 1) {
print(paste0(paste0(rep(' ',8), collapse = ''), 'Probability of Success --->'))
}
else if(i == 2) {
print(paste0(paste0(rep(' ',8), collapse = ''), paste0(format(p, nsmall = 3), collapse = ' ')))
}
else{
tempstr <- paste0("x = ", i-3, " | ", paste0(fun(x=i-3), collapse = ' '))
print(tempstr)
}
}
}
fun()
# Developing the actual binomial distribution
fun <- function(){
n <- as.integer(readLines(n = 1)) # Use readlines to create the interaction with a user
p <- seq(.050, .950, .10)
fun <- function(x, N=n, prob = p){
format(round((pbinom(x, size = N, prob = prob))), nsmall = 3)
}
for(i in 0:(n+3)){
if(i == 0){
print(sprintf("n = %d", n))
}
else if (i == 1) {
print(paste0(paste0(rep(' ',8), collapse = ''), 'Probability of Success --->'))
}
else if(i == 2) {
print(paste0(paste0(rep(' ',8), collapse = ''), paste0(format(p, nsmall = 3), collapse = ' ')))
}
else{
tempstr <- paste0("x = ", i-3, " | ", paste0(fun(x=i-3), collapse = ' '))
print(tempstr)
}
}
}
fun()
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles/ZipCodeYearTests")
library(rgdal)
library(rgeos)
USzips <- readOGR(".", "fe_2007_us_zcta500")
VABoundary <- readOGR(".", "VAState")
USzips <- spTransform(USzips, CRS(proj4string(VABoundary)))
plot(VABoundary)
points(USzips)
USzips <- readOGR(".", "fe_2007_us_zcta500")
VABoundary <- readOGR(".", "VAState")
USzips <- spTransform(USzips, CRS(proj4string(VABoundary)))
plot(VABoundary)
points(USzips)
points(USzips)
install.packages('arulesViz')
library(arulesViz)
plot(VABoundary)
points(USzips)
points(USzips@ZCTA5CE00)
slotnames(USzips)
slotNames(USzips)
slotNames(VABoundary)
points(USzips@polygons)
points(USzips@polygons, USzips@proj4string)
points(USzips@polygons, USzips@polygons)
slotNames(USzips)
VA_zipsub <- USzips[VABoundary,]
slotNames(USzips)
plot(VABoundary)
points(VA_zipsub)
plot(VA_zipsub)
oofmap <- readOGR(".", "00f76")
VA_zipsubCRS <- spTransform(VA_zipsub, CRS(proj4string(00f76)))
VA_zipsubCRS <- spTransform(VA_zipsub, CRS(proj4string(oofmap)))
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles")
warszipsfull <- read_dta('WarShawFullNoMiss.dta')
head(warszipsfull)
str(warszipsfull)
## Make sure all is numeric and take out what is not numeric##
class(warszipsfull$zipnum)
class(warszipsfull$respondent)
class(warszipsfull$ideal_point)
class(warszipsfull$ideal_point_se)
warszipsfull$source <- NULL
warszipsfull$zip <- NULL
warszipsfull$notnumeric <- NULL
setwd("/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/BIGWork/BIGDataFiles")
install.packages('haven')
library(haven)
warszipsfull <- read_dta('WarShawFullNoMiss.dta')
head(warszipsfull)
str(warszipsfull)
## Make sure all is numeric and take out what is not numeric##
class(warszipsfull$zipnum)
class(warszipsfull$respondent)
class(warszipsfull$ideal_point)
class(warszipsfull$ideal_point_se)
warszipsfull$source <- NULL
warszipsfull$zip <- NULL
warszipsfull$notnumeric <- NULL
View(warszipsfull)
wzaggfull <-aggregate(warszipsfull, by=list(warszipsfull$zipnum),
FUN=mean, na.rm=TRUE)
summary(wzaggfull$zipnum)
wzaggfull$zipnum[!wzaggfull$zipnum %in% VA_zipsubCRS@data$ZCTA5CE00] <- NA
View(wzaggfull)
wzaggfull <- na.omit(wzaggfull)
library(raster)
class(wzaggfull$Group.1)
class(wzaggfull$zipnum)
wzaggfull$respondent <- NULL
wzaggfull$zipnum <- NULL
names(wzaggfull) <- c("ZCTA5CE00", "IdePoAv", "IdePoSE")
VA_zipsubCRSmerge <- merge(VA_zipsubCRS, wzaggfull, by='ZCTA5CE00')
VA_zipsubCRSmerge@data
Results<-gIntersects(VA_zipsubCRSmerge, oofmap, byid=TRUE)
rownames(Results)<-oofmap@data$PRECINCT
colnames(Results)<-VA_zipsubCRSmerge@data$ZCTA5CE00
View(Results)
library(sp)
library(raster)
library(rgdal)
library(rgeos)
library(maptools)
inters <- (VA_zipsubCRSmerge, oofmap)
inters <- intersect(VA_zipsubCRSmerge, oofmap)
plot(VA_zipsubCRSmerge, axes=T); plot(oofmap, add=T); plot(inters, add=T, col='red')
inters$area <- area(inters)
aggregate(area~oofmap + VA_zipsubCRSmerge, data=inters, FUN=sum)
aggregate(area~oofmap@data + VA_zipsubCRSmerge@data, data=inters, FUN=sum)
aggregate(area~oofmap + VA_zipsubCRSmerge, data=inters, FUN=sum)
aggregate(area~oofmap@data$PRECINCT + VA_zipsubCRSmerge, data=inters, FUN=sum)
aggregate(area~oofmap@data$PRECINCT + VA_zipsubCRSmerge@data$ZCTA5CE00, data=inters, FUN=sum)
projection(oofmap) <- projection(VA_zipsubCRSmerge)
inters <- intersect(VA_zipsubCRSmerge, oofmap)
plot(VA_zipsubCRSmerge, axes=T); plot(oofmap, add=T); plot(inters, add=T, col='red')
inters$area <- area(inters)
aggregate(area~oofmap + VA_zipsubCRSmerge, data=inters, FUN=sum)
inters
inters@data
View(COS)
view(inters@data)
view(inters@data)
View(SIN)
View(inters@data)
mergeddata <- as.data.frame(inters@data)
View(mergeddata)
View(mergeddata)
mergeddata$CLASSFP00 <- NULL
mergeddata$MTFCC00 <- NULL
mergeddata$FUNCSTAT00 <- NULL
mergeddata$NAME <- NULL
mergedistrict <-aggregate(mergeddata, by=list(mergeddata$cluster),
FUN=mean, na.rm=TRUE)
View(mergedistrict)
mean(mergedistrict$IdePoAv)
library(rgdal)
library(rgdal)

shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
shinyUI(fluidPage(
titlePanel("Action Button, isolate and plot"),
fluidRow(
column(4, wellPanel(
sliderInput("n", "N:", min = 10, max = 1000, value = 200,
step = 10),
#actionButton("goButton", "Go!"),
br(),
p("The plot won't update until the button is clicked.",
" Without the use of ", code("isolate()"),
" in server.R, the plot would update whenever the slider",
" changes."),
br(),
p("This also shows the use of HTML tags.")
)),
column(8,
plotOutput("myplot")
)
)
))
shinyServer(function(input, output) {
output$myplot <- renderPlot({
# Simply accessing input$goButton here makes this reactive
# object take a dependency on it. That means when
# input$goButton changes, this code will re-execute.
#input$goButton
# Use isolate() to avoid dependency on input$n
#    isolate({
colors = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan")
hist(rnorm(input$n),
ylim = c(0,input$n/2),
col = colors,
main = "Simple histogram",
xlab="Standardized normal variate",
ylab = "Frequency")
#    })
})
})

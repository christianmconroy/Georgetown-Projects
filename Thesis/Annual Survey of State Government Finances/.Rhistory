summary(fit.22a)
alias(fit.22a)
fit.22b <- glm(purchase01 ~ . , data = OJ[,-c(10:13, 16:17)], family = binomial)
summary(fit.22b)
OJ$pred = predict(fit.22b, OJ, type = "response")
r <- roc(OJ$purchase01, OJ$pred)
plot(r)
auc(OJ$purchase01, OJ$pred)
PriceMM <- OJ
PriceMM$PriceMM <- PriceMM$PriceMM -.01
PriceCH <- OJ
PriceCH$PriceCH <- PriceCH$PriceCH + .01
DiscMM <- OJ
DiscMM$DiscMM <- DiscMM$DiscMM +.01
# Price MM Decline
P1 <- predict(fit.22b, PriceMM, type = "response")
P0 <- predict(fit.22b, OJ, type = "response")
mean(P1 - P0, na.rm = TRUE)
# Price CH Increase
P1 <- predict(fit.22b, PriceCH, type = "response")
P0 <- predict(fit.22b, OJ, type = "response")
mean(P1 - P0, na.rm = TRUE)
# Disc MM Increase
P1 <- predict(fit.22b, DiscMM, type = "response")
P0 <- predict(fit.22b, OJ, type = "response")
mean(P1 - P0, na.rm = TRUE)
# Get variables with the largest variance
all.sd <- apply(pixels, 2, sd)
head(sort(all.sd, decreasing=TRUE), 10)
# Build classified using those variables
fit6 <- glm(factor(Digit) ~ X379 + X407 + X462 + X628 + X463 + X435 + X438 + X434 + X629 + X410 , data = pixels, family = binomial)
# Predict using train data
pixels$pred = predict(fit6, pixels, type = "response")
# Build the ROC Curve and Get AOC
r <- roc(pixels$Digit, pixels$pred)
plot(r)
auc(pixels$Digit, pixels$pred)
# Predict using test data
test_pixels$pred <- predict(fit6, newdata = test_pixels, type = 'response')
# Build the ROC Curve and Get AOC
r <- roc(test_pixels$Digit, test_pixels$pred)
plot(r)
auc(test_pixels$Digit, test_pixels$pred)
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
plot_digit(4) #1
plot_digit(6) #2
plot_digit(8) #3
plot_digit(3) #4
plot_digit(1) #5
plot_digit(14) #6
plot_digit(16) #7
plot_digit(47) #8
plot_digit(5) #9
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
require(knitr)
require(ISLR)
require(SmartEDA)
require(MASS)
require(ggplot2)
require(car)
opts_chunk$set(echo = TRUE)
options(digits = 3)
opts_knit$set(root.dir ="/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester 6 Spring 2019/StatLearning for Analytics")
exp(-6 + .05*40 + 1*3.5)/(1+exp(-6 + .05*40 + 1*3.5))
# Hours = log(p/1-p) - ((B0 + B2*3.5)/B1)
log(.50/(1-.50)) - ((-6 + 3.5)/0.05)
data <-load('mnist68.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
plot_digit(4) #1
plot_digit(6) #2
plot_digit(8) #3
plot_digit(3) #4
plot_digit(1) #5
plot_digit(14) #6
plot_digit(16) #7
plot_digit(47) #8
plot_digit(5) #9
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
require(knitr)
require(ISLR)
require(SmartEDA)
require(MASS)
require(ggplot2)
require(car)
opts_chunk$set(echo = TRUE)
options(digits = 3)
opts_knit$set(root.dir ="/Users/chris/Documents/GeorgetownMPPMSFS/McCourtMPP/Semester 6 Spring 2019/StatLearning for Analytics")
exp(-6 + .05*40 + 1*3.5)/(1+exp(-6 + .05*40 + 1*3.5))
# Hours = log(p/1-p) - ((B0 + B2*3.5)/B1)
log(.50/(1-.50)) - ((-6 + 3.5)/0.05)
data <-load('mnist68.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
data <-load('mnist_all.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
plot_digit(4) #1
plot_digit(6) #2
plot_digit(8) #3
plot_digit(3) #4
plot_digit(1) #5
plot_digit(14) #6
plot_digit(16) #7
plot_digit(47) #8
plot_digit(5) #9
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
data <-load('mnist_all.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# Subset to two classifiers
test <- test[test$y < 2,]
data <-load('mnist_all.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# #Transition to dataframes
# Train Data
pixels <- data.frame(train$n, train$x, train$y)
names(pixels)[1] <- c("N")
names(pixels)[786] <- c("Digit")
# Test Data
test_pixels <- data.frame(test$n, test$x, test$y)
names(test_pixels)[1] <- c("N")
names(test_pixels)[786] <- c("Digit")
# Subset to two classifiers
test <- test[test$y < 2,]
data <-load('mnist_all.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
# #Transition to dataframes
# Train Data
pixels <- data.frame(train$n, train$x, train$y)
names(pixels)[1] <- c("N")
names(pixels)[786] <- c("Digit")
# Test Data
test_pixels <- data.frame(test$n, test$x, test$y)
names(test_pixels)[1] <- c("N")
names(test_pixels)[786] <- c("Digit")
# Subset to two classifiers
pixels <- pixels[pixels$Digit < 2,]
test_pixels <- test_pixels[test_pixels$Digit < 2,]
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
plot_digit(4) #1
plot_digit(6) #2
plot_digit(8) #3
plot_digit(3) #4
plot_digit(1) #5
plot_digit(14) #6
plot_digit(16) #7
plot_digit(47) #8
plot_digit(5) #9
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
# Visualize digits 0-9
par(mfrow=c(2,5))
plot_digit(2) #0
plot_digit(4) #1
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
# Visualize digits 0-9
par(mfrow=c(1,2))
plot_digit(2) #0
plot_digit(4) #1
# find pixels that have zero variability
summary(train$x[,10]) # All X at this Y have 0 variability
summary(train$x[1,100])
summary(train$x[900,400])
summary(train$x[,700]) # All X at this Y have 0 variability
summary(train$x[,781]) # All X at this Y have 0 variability
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
# Visualize digits 0-9
par(mfrow=c(1,2))
plot_digit(2) #0
plot_digit(4) #1
# find pixels that have zero variability
summary(test_pixels$X10) # All X at this Y have 0 variability
summary(test_pixels$X100)
summary(test_pixels$X900)
summary(test_pixels$X700) # All X at this Y have 0 variability
summary(test_pixels$X781)
# find pixels that have positive variability
summary(train$x[,100])
summary(train$x[,200])
summary(train$x[,300])
summary(train$x[,400])
summary(train$x[,500])
# Pick several pairs of features that both have non-zero variability. Make a scatterplot of these two
# features against each other. Label the datapoints with colors corresponding to the digits.
x1 <- train$x[,100]
y1 <- train$x[,200]
y2 <- train$y
forplot <- data.frame(x1, y1, y2)
ggplot(forplot, aes(x=x1, y=y1)) +geom_point(aes(col=factor(y2)))
data <-load('mnist_all.RData')
plot_digit <- function(j){
arr784 <- as.numeric(train$x[j,])
col=gray(12:1/12)
image(matrix(arr784, nrow=28)[,28:1], col=col,
main = paste("this is a ",train$y[j]))
}
setwd("~/GeorgetownMPPMSFS/McCourtMPP/Semester5Fall2018/Thesis/Annual Survey of State Government Finances")
# File Type 1
allfilescbp1 <- list.files(path = "./2015", pattern="*.xlsx", full.names = TRUE)
read_xlsx_filename <- function(filename){
stats <- read.xlsx(filename, colNames = TRUE)
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_xlsx_filename)
library(dplyr)
setwd("~/GeorgetownMPPMSFS/McCourtMPP/Semester5Fall2018/Thesis/Annual Survey of State Government Finances")
# File Type 1
allfilescbp1 <- list.files(path = "./2015", pattern="*.xlsx", full.names = TRUE)
read_xlsx_filename <- function(filename){
stats <- read.xlsx(filename, colNames = TRUE)
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_xlsx_filename)
library(plyr)
allfilescbp1 <- list.files(path = "./2015", pattern="*.xlsx", full.names = TRUE)
read_xlsx_filename <- function(filename){
stats <- read.xlsx(filename, colNames = TRUE)
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_xlsx_filename)
allfilescbp1 <- list.files(path = "./CBP TS/cbp06", pattern="*.xlsx", full.names = TRUE)
read_table_filename <- function(filename){
stats <- read.table(filename, header = TRUE, sep = ",")
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_table_filename)
allfilescbp1
setwd("~/GeorgetownMPPMSFS/McCourtMPP/Semester5Fall2018/Thesis/Annual Survey of State Government Finances")
# File Type 1
allfilescbp1 <- list.files(path = "./CBP TS/cbp06", pattern="*.csv", full.names = TRUE)
read_table_filename <- function(filename){
stats <- read.table(filename, header = TRUE, sep = ",")
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_table_filename)
allfilescbp1
allfilescbp1 <- list.files(path = "./2015", pattern="*.xlsx", full.names = TRUE)
read_table_filename <- function(filename){
stats <- read.table(filename, header = TRUE, sep = ",")
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_table_filename)
allfilescbp1
library(readxl)
allfilescbp1 <- list.files(path = "./2015", pattern="*.xlsx", full.names = TRUE)
read_table_filename <- function(filename){
stats <- read_excel(filename)
stats$source <- filename #EDIT
stats
}
CBPTSFull06 <- ldply(allfilescbp1, read_table_filename)
View(CBPTSFull06)
# File Type 2
GovFin2 <- list.files(path = "./1214", pattern="*.csv", full.names = TRUE)
read_csv_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 1)
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_csv_filename)
View(GovFin1214)
GovFin2 <- list.files(path = "./1214", pattern="*.csv", full.names = TRUE)
read_csv_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 1, sep = ",")
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_csv_filename)
# File Type 2
GovFin2 <- list.files(path = "./1214", pattern="*.xlsx", full.names = TRUE)
read_xl2_filename <- function(filename){
stats <- read_excel(filename, skip=1)
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_xl2_filename)
# File Type 2
GovFin2 <- list.files(path = "./1214", pattern="*.xlsx", full.names = TRUE)
read_xl2_filename <- function(filename){
stats <- read_excel(filename, skip=1)
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_xl2_filename)
View(GovFin1214)
GovFin2 <- list.files(path = "./1214", pattern="*.csv", full.names = TRUE)
read_csv_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 1)
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_csv_filename)
View(GovFin1214)
# File Type 2
GovFin2 <- list.files(path = "./1214", pattern="*.csv", full.names = TRUE)
read_csv_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 1)
stats$source <- filename #EDIT
stats
}
GovFin1214 <- ldply(GovFin2, read_csv_filename)
View(GovFin1214)
# File Type 3
GovFin3 <- list.files(path = "./1214", pattern="*.csv", full.names = TRUE)
GovFin12 <- ldply(GovFin3, read_csv_filename)
View(GovFin12)
# File Type 3
GovFin3 <- list.files(path = "./2012", pattern="*.csv", full.names = TRUE)
GovFin12 <- ldply(GovFin3, read_csv_filename)
View(GovFin12)
# File Type 4
GovFin4 <- list.files(path = "./0411", pattern="*.csv", full.names = TRUE)
read_csv2_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 2)
stats$source <- filename #EDIT
stats
}
GovFin0411 <- ldply(GovFin4, read_csv2_filename)
# File Type 4
GovFin4 <- list.files(path = "./0411", pattern="*.xls", full.names = TRUE)
read_xl2_filename <- function(filename){
stats <- read_excel(filename, skip=2)
stats$source <- filename #EDIT
stats
}
GovFin0411 <- ldply(GovFin4, read_xl2_filename)
View(GovFin0411)
GovFin5 <- list.files(path = "./9903", pattern="*.xls", full.names = TRUE)
GovFin0411 <- ldply(GovFin5, read_xl2_filename)
GovFin5 <- list.files(path = "./9903", pattern="*.xls", full.names = TRUE)
GovFin9903 <- ldply(GovFin5, read_xl2_filename)
View(GovFin9903)
GovFin5 <- list.files(path = "./9903", pattern="*.xls", full.names = TRUE)
GovFin9903 <- ldply(GovFin5, read_xl2_filename)
View(GovFin9903)
# File Type 1
GovFin1 <- list.files(path = "./1215", pattern="*.csv", full.names = TRUE)
read_csv_filename <- function(filename){
stats <- read.csv(filename, header = TRUE, stringsAsFactors = FALSE, skip = 1)
stats$source <- filename #EDIT
stats
}
GovFin1314 <- ldply(GovFin2, read_csv_filename)
# File Type 2
GovFin2 <- list.files(path = "./2012", pattern="*.csv", full.names = TRUE)
GovFin12 <- ldply(GovFin2, read_csv_filename)
# File Type 3
GovFin3 <- list.files(path = "./0411", pattern="*.xls", full.names = TRUE)
read_xl2_filename <- function(filename){
stats <- read_excel(filename, skip=2)
stats$source <- filename #EDIT
stats
}
GovFin0411 <- ldply(GovFin3, read_xl2_filename)
# File Type 4
GovFin4 <- list.files(path = "./9903", pattern="*.xls", full.names = TRUE)
GovFin9903 <- ldply(GovFin4, read_xl2_filename)
# File Type 5
GovFin5 <- list.files(path = "./98", pattern="*.xls", full.names = TRUE)
read_xl2_filename <- function(filename){
stats <- read_excel(filename, skip=2)
stats$source <- filename #EDIT
stats
}
GovFin98 <- ldply(GovFin5, read_xl2_filename)
